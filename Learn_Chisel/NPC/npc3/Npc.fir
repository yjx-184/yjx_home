circuit Npc :
  module ImmGen :
    input clock : Clock
    input reset : Reset
    output io : { flip instin : UInt<32>, flip immop : UInt<3>, immout : SInt<32>}

    node _immI_T = bits(io.instin, 31, 31) @[ImmGen.scala 12:38]
    node _immI_T_1 = bits(_immI_T, 0, 0) @[Bitwise.scala 74:15]
    node _immI_T_2 = mux(_immI_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 74:12]
    node _immI_T_3 = bits(io.instin, 31, 20) @[ImmGen.scala 12:54]
    node _immI_T_4 = cat(_immI_T_2, _immI_T_3) @[Cat.scala 31:58]
    node immI = asSInt(_immI_T_4) @[ImmGen.scala 12:64]
    node _immS_T = bits(io.instin, 31, 31) @[ImmGen.scala 13:38]
    node _immS_T_1 = bits(_immS_T, 0, 0) @[Bitwise.scala 74:15]
    node _immS_T_2 = mux(_immS_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 74:12]
    node _immS_T_3 = bits(io.instin, 30, 25) @[ImmGen.scala 13:54]
    node _immS_T_4 = bits(io.instin, 11, 7) @[ImmGen.scala 13:73]
    node immS_hi = cat(_immS_T_2, _immS_T_3) @[Cat.scala 31:58]
    node _immS_T_5 = cat(immS_hi, _immS_T_4) @[Cat.scala 31:58]
    node immS = asSInt(_immS_T_5) @[ImmGen.scala 13:82]
    node _immB_T = bits(io.instin, 31, 31) @[ImmGen.scala 14:38]
    node _immB_T_1 = bits(_immB_T, 0, 0) @[Bitwise.scala 74:15]
    node _immB_T_2 = mux(_immB_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 74:12]
    node _immB_T_3 = bits(io.instin, 7, 7) @[ImmGen.scala 14:54]
    node _immB_T_4 = bits(io.instin, 30, 25) @[ImmGen.scala 14:68]
    node _immB_T_5 = bits(io.instin, 11, 8) @[ImmGen.scala 14:87]
    node immB_lo = cat(_immB_T_5, UInt<1>("h0")) @[Cat.scala 31:58]
    node immB_hi_hi = cat(_immB_T_2, _immB_T_3) @[Cat.scala 31:58]
    node immB_hi = cat(immB_hi_hi, _immB_T_4) @[Cat.scala 31:58]
    node _immB_T_6 = cat(immB_hi, immB_lo) @[Cat.scala 31:58]
    node immB = asSInt(_immB_T_6) @[ImmGen.scala 14:106]
    node _immU_T = bits(io.instin, 31, 12) @[ImmGen.scala 15:29]
    node _immU_T_1 = cat(_immU_T, UInt<12>("h0")) @[Cat.scala 31:58]
    node immU = asSInt(_immU_T_1) @[ImmGen.scala 15:57]
    node _immJ_T = bits(io.instin, 31, 31) @[ImmGen.scala 16:38]
    node _immJ_T_1 = bits(_immJ_T, 0, 0) @[Bitwise.scala 74:15]
    node _immJ_T_2 = mux(_immJ_T_1, UInt<12>("hfff"), UInt<12>("h0")) @[Bitwise.scala 74:12]
    node _immJ_T_3 = bits(io.instin, 19, 12) @[ImmGen.scala 16:54]
    node _immJ_T_4 = bits(io.instin, 20, 20) @[ImmGen.scala 16:73]
    node _immJ_T_5 = bits(io.instin, 30, 21) @[ImmGen.scala 16:88]
    node immJ_lo = cat(_immJ_T_5, UInt<1>("h0")) @[Cat.scala 31:58]
    node immJ_hi_hi = cat(_immJ_T_2, _immJ_T_3) @[Cat.scala 31:58]
    node immJ_hi = cat(immJ_hi_hi, _immJ_T_4) @[Cat.scala 31:58]
    node _immJ_T_6 = cat(immJ_hi, immJ_lo) @[Cat.scala 31:58]
    node immJ = asSInt(_immJ_T_6) @[ImmGen.scala 16:108]
    node _io_immout_T = eq(UInt<1>("h0"), io.immop) @[Mux.scala 81:61]
    node _io_immout_T_1 = mux(_io_immout_T, immI, asSInt(UInt<1>("h0"))) @[Mux.scala 81:58]
    node _io_immout_T_2 = eq(UInt<1>("h1"), io.immop) @[Mux.scala 81:61]
    node _io_immout_T_3 = mux(_io_immout_T_2, immS, _io_immout_T_1) @[Mux.scala 81:58]
    node _io_immout_T_4 = eq(UInt<2>("h2"), io.immop) @[Mux.scala 81:61]
    node _io_immout_T_5 = mux(_io_immout_T_4, immB, _io_immout_T_3) @[Mux.scala 81:58]
    node _io_immout_T_6 = eq(UInt<2>("h3"), io.immop) @[Mux.scala 81:61]
    node _io_immout_T_7 = mux(_io_immout_T_6, immU, _io_immout_T_5) @[Mux.scala 81:58]
    node _io_immout_T_8 = eq(UInt<3>("h4"), io.immop) @[Mux.scala 81:61]
    node _io_immout_T_9 = mux(_io_immout_T_8, immJ, _io_immout_T_7) @[Mux.scala 81:58]
    io.immout <= _io_immout_T_9 @[ImmGen.scala 19:15]

  module RegFile :
    input clock : Clock
    input reset : Reset
    output io : { flip ra : UInt<4>, flip rb : UInt<4>, flip rw : UInt<4>, flip busw : UInt<32>, flip regwr : UInt<1>, busa : UInt<32>, busb : UInt<32>, regsout : UInt<32>[16], reg_rw : UInt<32>}

    wire _regs_WIRE : UInt<32>[16] @[RegFile.scala 20:31]
    _regs_WIRE[0] <= UInt<32>("h0") @[RegFile.scala 20:31]
    _regs_WIRE[1] <= UInt<32>("h0") @[RegFile.scala 20:31]
    _regs_WIRE[2] <= UInt<32>("h0") @[RegFile.scala 20:31]
    _regs_WIRE[3] <= UInt<32>("h0") @[RegFile.scala 20:31]
    _regs_WIRE[4] <= UInt<32>("h0") @[RegFile.scala 20:31]
    _regs_WIRE[5] <= UInt<32>("h0") @[RegFile.scala 20:31]
    _regs_WIRE[6] <= UInt<32>("h0") @[RegFile.scala 20:31]
    _regs_WIRE[7] <= UInt<32>("h0") @[RegFile.scala 20:31]
    _regs_WIRE[8] <= UInt<32>("h0") @[RegFile.scala 20:31]
    _regs_WIRE[9] <= UInt<32>("h0") @[RegFile.scala 20:31]
    _regs_WIRE[10] <= UInt<32>("h0") @[RegFile.scala 20:31]
    _regs_WIRE[11] <= UInt<32>("h0") @[RegFile.scala 20:31]
    _regs_WIRE[12] <= UInt<32>("h0") @[RegFile.scala 20:31]
    _regs_WIRE[13] <= UInt<32>("h0") @[RegFile.scala 20:31]
    _regs_WIRE[14] <= UInt<32>("h0") @[RegFile.scala 20:31]
    _regs_WIRE[15] <= UInt<32>("h0") @[RegFile.scala 20:31]
    reg regs : UInt<32>[16], clock with :
      reset => (reset, _regs_WIRE) @[RegFile.scala 20:23]
    node _io_busa_T = eq(io.ra, UInt<1>("h0")) @[RegFile.scala 23:26]
    node _io_busa_T_1 = mux(_io_busa_T, UInt<1>("h0"), regs[io.ra]) @[RegFile.scala 23:19]
    io.busa <= _io_busa_T_1 @[RegFile.scala 23:13]
    node _io_busb_T = eq(io.rb, UInt<1>("h0")) @[RegFile.scala 24:26]
    node _io_busb_T_1 = mux(_io_busb_T, UInt<1>("h0"), regs[io.rb]) @[RegFile.scala 24:19]
    io.busb <= _io_busb_T_1 @[RegFile.scala 24:13]
    node _T = bits(io.regwr, 0, 0) @[RegFile.scala 27:19]
    node _T_1 = neq(io.rw, UInt<1>("h0")) @[RegFile.scala 27:35]
    node _T_2 = and(_T, _T_1) @[RegFile.scala 27:26]
    when _T_2 : @[RegFile.scala 27:44]
      regs[io.rw] <= io.busw @[RegFile.scala 28:19]
    io.regsout <= regs @[RegFile.scala 31:16]
    io.reg_rw <= regs[io.rw] @[RegFile.scala 32:15]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip rs1 : UInt<32>, flip rs2 : UInt<32>, flip imm : SInt<32>, flip pc : UInt<32>, flip alua : UInt<1>, flip alub : UInt<2>, flip aluctr : UInt<4>, less : UInt<1>, zero : UInt<1>, result : UInt<32>}

    node _aluA_T = eq(io.alua, UInt<1>("h1")) @[ALU.scala 24:28]
    node aluA = mux(_aluA_T, io.pc, io.rs1) @[ALU.scala 24:19]
    node _aluB_T = asUInt(io.imm) @[ALU.scala 28:27]
    node _aluB_T_1 = eq(UInt<1>("h1"), io.alub) @[Mux.scala 81:61]
    node _aluB_T_2 = mux(_aluB_T_1, _aluB_T, io.rs2) @[Mux.scala 81:58]
    node _aluB_T_3 = eq(UInt<2>("h2"), io.alub) @[Mux.scala 81:61]
    node aluB = mux(_aluB_T_3, UInt<3>("h4"), _aluB_T_2) @[Mux.scala 81:58]
    node _isSub_T = eq(io.aluctr, UInt<4>("h8")) @[ALU.scala 34:27]
    node _isSub_T_1 = eq(io.aluctr, UInt<2>("h2")) @[ALU.scala 34:54]
    node isSub = or(_isSub_T, _isSub_T_1) @[ALU.scala 34:41]
    node _operandB_T = not(aluB) @[ALU.scala 35:31]
    node operandB = mux(isSub, _operandB_T, aluB) @[ALU.scala 35:23]
    node carryIn = mux(isSub, UInt<1>("h1"), UInt<1>("h0")) @[ALU.scala 36:22]
    node _sum_T = add(aluA, operandB) @[ALU.scala 37:20]
    node _sum_T_1 = tail(_sum_T, 1) @[ALU.scala 37:20]
    node _sum_T_2 = add(_sum_T_1, carryIn) @[ALU.scala 37:31]
    node sum = tail(_sum_T_2, 1) @[ALU.scala 37:31]
    node _overflow_T = bits(aluA, 31, 31) @[ALU.scala 39:25]
    node _overflow_T_1 = bits(aluB, 31, 31) @[ALU.scala 39:38]
    node _overflow_T_2 = neq(_overflow_T, _overflow_T_1) @[ALU.scala 39:30]
    node _overflow_T_3 = bits(sum, 31, 31) @[ALU.scala 39:51]
    node _overflow_T_4 = bits(aluA, 31, 31) @[ALU.scala 39:64]
    node _overflow_T_5 = neq(_overflow_T_3, _overflow_T_4) @[ALU.scala 39:56]
    node overflow = and(_overflow_T_2, _overflow_T_5) @[ALU.scala 39:44]
    node _slt_T = bits(sum, 31, 31) @[ALU.scala 42:18]
    node slt = xor(_slt_T, overflow) @[ALU.scala 42:23]
    node sltu = lt(aluA, aluB) @[ALU.scala 43:21]
    node _sll_T = bits(aluB, 4, 0) @[ALU.scala 44:27]
    node sll = dshl(aluA, _sll_T) @[ALU.scala 44:20]
    node _srl_T = bits(aluB, 4, 0) @[ALU.scala 45:27]
    node srl = dshr(aluA, _srl_T) @[ALU.scala 45:20]
    node _sra_T = asSInt(aluA) @[ALU.scala 46:21]
    node _sra_T_1 = bits(aluB, 4, 0) @[ALU.scala 46:35]
    node _sra_T_2 = dshr(_sra_T, _sra_T_1) @[ALU.scala 46:28]
    node sra = asUInt(_sra_T_2) @[ALU.scala 46:43]
    node xor = xor(aluA, aluB) @[ALU.scala 47:20]
    node or = or(aluA, aluB) @[ALU.scala 48:20]
    node and = and(aluA, aluB) @[ALU.scala 49:20]
    node eq = eq(aluA, aluB) @[ALU.scala 51:20]
    node _io_result_T = eq(UInt<1>("h0"), io.aluctr) @[Mux.scala 81:61]
    node _io_result_T_1 = mux(_io_result_T, sum, UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_result_T_2 = eq(UInt<4>("h8"), io.aluctr) @[Mux.scala 81:61]
    node _io_result_T_3 = mux(_io_result_T_2, sum, _io_result_T_1) @[Mux.scala 81:58]
    node _io_result_T_4 = eq(UInt<2>("h2"), io.aluctr) @[Mux.scala 81:61]
    node _io_result_T_5 = mux(_io_result_T_4, slt, _io_result_T_3) @[Mux.scala 81:58]
    node _io_result_T_6 = eq(UInt<4>("ha"), io.aluctr) @[Mux.scala 81:61]
    node _io_result_T_7 = mux(_io_result_T_6, sltu, _io_result_T_5) @[Mux.scala 81:58]
    node _io_result_T_8 = eq(UInt<1>("h1"), io.aluctr) @[Mux.scala 81:61]
    node _io_result_T_9 = mux(_io_result_T_8, sll, _io_result_T_7) @[Mux.scala 81:58]
    node _io_result_T_10 = eq(UInt<3>("h5"), io.aluctr) @[Mux.scala 81:61]
    node _io_result_T_11 = mux(_io_result_T_10, srl, _io_result_T_9) @[Mux.scala 81:58]
    node _io_result_T_12 = eq(UInt<4>("hd"), io.aluctr) @[Mux.scala 81:61]
    node _io_result_T_13 = mux(_io_result_T_12, sra, _io_result_T_11) @[Mux.scala 81:58]
    node _io_result_T_14 = eq(UInt<3>("h4"), io.aluctr) @[Mux.scala 81:61]
    node _io_result_T_15 = mux(_io_result_T_14, xor, _io_result_T_13) @[Mux.scala 81:58]
    node _io_result_T_16 = eq(UInt<3>("h6"), io.aluctr) @[Mux.scala 81:61]
    node _io_result_T_17 = mux(_io_result_T_16, or, _io_result_T_15) @[Mux.scala 81:58]
    node _io_result_T_18 = eq(UInt<3>("h7"), io.aluctr) @[Mux.scala 81:61]
    node _io_result_T_19 = mux(_io_result_T_18, and, _io_result_T_17) @[Mux.scala 81:58]
    node _io_result_T_20 = eq(UInt<2>("h3"), io.aluctr) @[Mux.scala 81:61]
    node _io_result_T_21 = mux(_io_result_T_20, aluB, _io_result_T_19) @[Mux.scala 81:58]
    io.result <= _io_result_T_21 @[ALU.scala 55:15]
    io.zero <= eq @[ALU.scala 72:13]
    node _io_less_T = eq(UInt<2>("h2"), io.aluctr) @[Mux.scala 81:61]
    node _io_less_T_1 = mux(_io_less_T, slt, UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_less_T_2 = eq(UInt<4>("ha"), io.aluctr) @[Mux.scala 81:61]
    node _io_less_T_3 = mux(_io_less_T_2, sltu, _io_less_T_1) @[Mux.scala 81:58]
    io.less <= _io_less_T_3 @[ALU.scala 73:13]

  module ContrGen :
    input clock : Clock
    input reset : Reset
    output io : { flip opcode : UInt<7>, flip func3 : UInt<3>, flip func7 : UInt<7>, immop : UInt<3>, regwr : UInt<1>, alua : UInt<1>, alub : UInt<2>, aluctr : UInt<4>, branch : UInt<3>, memreg : UInt<1>, memwr : UInt<1>, memop : UInt<3>, rdmemop : UInt<3>}

    node _io_immop_T = eq(UInt<5>("h13"), io.opcode) @[Mux.scala 81:61]
    node _io_immop_T_1 = mux(_io_immop_T, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_immop_T_2 = eq(UInt<2>("h3"), io.opcode) @[Mux.scala 81:61]
    node _io_immop_T_3 = mux(_io_immop_T_2, UInt<1>("h0"), _io_immop_T_1) @[Mux.scala 81:58]
    node _io_immop_T_4 = eq(UInt<7>("h67"), io.opcode) @[Mux.scala 81:61]
    node _io_immop_T_5 = mux(_io_immop_T_4, UInt<1>("h0"), _io_immop_T_3) @[Mux.scala 81:58]
    node _io_immop_T_6 = eq(UInt<6>("h23"), io.opcode) @[Mux.scala 81:61]
    node _io_immop_T_7 = mux(_io_immop_T_6, UInt<1>("h1"), _io_immop_T_5) @[Mux.scala 81:58]
    node _io_immop_T_8 = eq(UInt<7>("h63"), io.opcode) @[Mux.scala 81:61]
    node _io_immop_T_9 = mux(_io_immop_T_8, UInt<2>("h2"), _io_immop_T_7) @[Mux.scala 81:58]
    node _io_immop_T_10 = eq(UInt<6>("h37"), io.opcode) @[Mux.scala 81:61]
    node _io_immop_T_11 = mux(_io_immop_T_10, UInt<2>("h3"), _io_immop_T_9) @[Mux.scala 81:58]
    node _io_immop_T_12 = eq(UInt<5>("h17"), io.opcode) @[Mux.scala 81:61]
    node _io_immop_T_13 = mux(_io_immop_T_12, UInt<2>("h3"), _io_immop_T_11) @[Mux.scala 81:58]
    node _io_immop_T_14 = eq(UInt<7>("h6f"), io.opcode) @[Mux.scala 81:61]
    node _io_immop_T_15 = mux(_io_immop_T_14, UInt<3>("h4"), _io_immop_T_13) @[Mux.scala 81:58]
    io.immop <= _io_immop_T_15 @[ContrGen.scala 26:14]
    node _io_regwr_T = eq(UInt<7>("h63"), io.opcode) @[Mux.scala 81:61]
    node _io_regwr_T_1 = mux(_io_regwr_T, UInt<1>("h0"), UInt<1>("h1")) @[Mux.scala 81:58]
    node _io_regwr_T_2 = eq(UInt<6>("h23"), io.opcode) @[Mux.scala 81:61]
    node _io_regwr_T_3 = mux(_io_regwr_T_2, UInt<1>("h0"), _io_regwr_T_1) @[Mux.scala 81:58]
    io.regwr <= _io_regwr_T_3 @[ContrGen.scala 42:14]
    node _io_alua_T = eq(io.opcode, UInt<5>("h17")) @[ContrGen.scala 49:20]
    node _io_alua_T_1 = eq(io.opcode, UInt<7>("h6f")) @[ContrGen.scala 50:20]
    node _io_alua_T_2 = eq(io.opcode, UInt<7>("h67")) @[ContrGen.scala 51:20]
    node _io_alua_T_3 = eq(io.func3, UInt<1>("h0")) @[ContrGen.scala 51:49]
    node _io_alua_T_4 = and(_io_alua_T_2, _io_alua_T_3) @[ContrGen.scala 51:37]
    node _io_alua_T_5 = mux(_io_alua_T_4, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _io_alua_T_6 = mux(_io_alua_T_1, UInt<1>("h1"), _io_alua_T_5) @[Mux.scala 101:16]
    node _io_alua_T_7 = mux(_io_alua_T, UInt<1>("h1"), _io_alua_T_6) @[Mux.scala 101:16]
    io.alua <= _io_alua_T_7 @[ContrGen.scala 48:13]
    node _io_alub_T = eq(UInt<6>("h37"), io.opcode) @[Mux.scala 81:61]
    node _io_alub_T_1 = mux(_io_alub_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_alub_T_2 = eq(UInt<5>("h17"), io.opcode) @[Mux.scala 81:61]
    node _io_alub_T_3 = mux(_io_alub_T_2, UInt<1>("h1"), _io_alub_T_1) @[Mux.scala 81:58]
    node _io_alub_T_4 = eq(UInt<5>("h13"), io.opcode) @[Mux.scala 81:61]
    node _io_alub_T_5 = mux(_io_alub_T_4, UInt<1>("h1"), _io_alub_T_3) @[Mux.scala 81:58]
    node _io_alub_T_6 = eq(UInt<2>("h3"), io.opcode) @[Mux.scala 81:61]
    node _io_alub_T_7 = mux(_io_alub_T_6, UInt<1>("h1"), _io_alub_T_5) @[Mux.scala 81:58]
    node _io_alub_T_8 = eq(UInt<6>("h23"), io.opcode) @[Mux.scala 81:61]
    node _io_alub_T_9 = mux(_io_alub_T_8, UInt<1>("h1"), _io_alub_T_7) @[Mux.scala 81:58]
    node _io_alub_T_10 = eq(UInt<7>("h6f"), io.opcode) @[Mux.scala 81:61]
    node _io_alub_T_11 = mux(_io_alub_T_10, UInt<2>("h2"), _io_alub_T_9) @[Mux.scala 81:58]
    node _io_alub_T_12 = eq(UInt<7>("h67"), io.opcode) @[Mux.scala 81:61]
    node _io_alub_T_13 = mux(_io_alub_T_12, UInt<2>("h2"), _io_alub_T_11) @[Mux.scala 81:58]
    io.alub <= _io_alub_T_13 @[ContrGen.scala 55:13]
    node _io_aluctr_T = eq(io.opcode, UInt<6>("h37")) @[ContrGen.scala 67:20]
    node _io_aluctr_T_1 = eq(io.opcode, UInt<5>("h13")) @[ContrGen.scala 69:20]
    node _io_aluctr_T_2 = eq(io.func3, UInt<2>("h2")) @[ContrGen.scala 69:49]
    node _io_aluctr_T_3 = and(_io_aluctr_T_1, _io_aluctr_T_2) @[ContrGen.scala 69:37]
    node _io_aluctr_T_4 = eq(io.opcode, UInt<5>("h13")) @[ContrGen.scala 70:20]
    node _io_aluctr_T_5 = eq(io.func3, UInt<2>("h3")) @[ContrGen.scala 70:49]
    node _io_aluctr_T_6 = and(_io_aluctr_T_4, _io_aluctr_T_5) @[ContrGen.scala 70:37]
    node _io_aluctr_T_7 = eq(io.opcode, UInt<5>("h13")) @[ContrGen.scala 71:20]
    node _io_aluctr_T_8 = eq(io.func3, UInt<3>("h4")) @[ContrGen.scala 71:49]
    node _io_aluctr_T_9 = and(_io_aluctr_T_7, _io_aluctr_T_8) @[ContrGen.scala 71:37]
    node _io_aluctr_T_10 = eq(io.opcode, UInt<5>("h13")) @[ContrGen.scala 72:20]
    node _io_aluctr_T_11 = eq(io.func3, UInt<3>("h6")) @[ContrGen.scala 72:49]
    node _io_aluctr_T_12 = and(_io_aluctr_T_10, _io_aluctr_T_11) @[ContrGen.scala 72:37]
    node _io_aluctr_T_13 = eq(io.opcode, UInt<5>("h13")) @[ContrGen.scala 73:20]
    node _io_aluctr_T_14 = eq(io.func3, UInt<3>("h7")) @[ContrGen.scala 73:49]
    node _io_aluctr_T_15 = and(_io_aluctr_T_13, _io_aluctr_T_14) @[ContrGen.scala 73:37]
    node _io_aluctr_T_16 = eq(io.opcode, UInt<5>("h13")) @[ContrGen.scala 74:20]
    node _io_aluctr_T_17 = eq(io.func3, UInt<1>("h1")) @[ContrGen.scala 74:49]
    node _io_aluctr_T_18 = and(_io_aluctr_T_16, _io_aluctr_T_17) @[ContrGen.scala 74:37]
    node _io_aluctr_T_19 = eq(io.func7, UInt<1>("h0")) @[ContrGen.scala 74:74]
    node _io_aluctr_T_20 = and(_io_aluctr_T_18, _io_aluctr_T_19) @[ContrGen.scala 74:62]
    node _io_aluctr_T_21 = eq(io.opcode, UInt<5>("h13")) @[ContrGen.scala 75:20]
    node _io_aluctr_T_22 = eq(io.func3, UInt<3>("h5")) @[ContrGen.scala 75:49]
    node _io_aluctr_T_23 = and(_io_aluctr_T_21, _io_aluctr_T_22) @[ContrGen.scala 75:37]
    node _io_aluctr_T_24 = eq(io.func7, UInt<1>("h0")) @[ContrGen.scala 75:74]
    node _io_aluctr_T_25 = and(_io_aluctr_T_23, _io_aluctr_T_24) @[ContrGen.scala 75:62]
    node _io_aluctr_T_26 = eq(io.opcode, UInt<5>("h13")) @[ContrGen.scala 76:20]
    node _io_aluctr_T_27 = eq(io.func3, UInt<3>("h5")) @[ContrGen.scala 76:49]
    node _io_aluctr_T_28 = and(_io_aluctr_T_26, _io_aluctr_T_27) @[ContrGen.scala 76:37]
    node _io_aluctr_T_29 = eq(io.func7, UInt<6>("h20")) @[ContrGen.scala 76:74]
    node _io_aluctr_T_30 = and(_io_aluctr_T_28, _io_aluctr_T_29) @[ContrGen.scala 76:62]
    node _io_aluctr_T_31 = eq(io.opcode, UInt<6>("h33")) @[ContrGen.scala 78:20]
    node _io_aluctr_T_32 = eq(io.func3, UInt<1>("h0")) @[ContrGen.scala 78:49]
    node _io_aluctr_T_33 = and(_io_aluctr_T_31, _io_aluctr_T_32) @[ContrGen.scala 78:37]
    node _io_aluctr_T_34 = eq(io.func7, UInt<6>("h20")) @[ContrGen.scala 78:74]
    node _io_aluctr_T_35 = and(_io_aluctr_T_33, _io_aluctr_T_34) @[ContrGen.scala 78:62]
    node _io_aluctr_T_36 = eq(io.opcode, UInt<6>("h33")) @[ContrGen.scala 79:20]
    node _io_aluctr_T_37 = eq(io.func3, UInt<1>("h1")) @[ContrGen.scala 79:49]
    node _io_aluctr_T_38 = and(_io_aluctr_T_36, _io_aluctr_T_37) @[ContrGen.scala 79:37]
    node _io_aluctr_T_39 = eq(io.func7, UInt<1>("h0")) @[ContrGen.scala 79:74]
    node _io_aluctr_T_40 = and(_io_aluctr_T_38, _io_aluctr_T_39) @[ContrGen.scala 79:62]
    node _io_aluctr_T_41 = eq(io.opcode, UInt<6>("h33")) @[ContrGen.scala 80:20]
    node _io_aluctr_T_42 = eq(io.func3, UInt<2>("h2")) @[ContrGen.scala 80:49]
    node _io_aluctr_T_43 = and(_io_aluctr_T_41, _io_aluctr_T_42) @[ContrGen.scala 80:37]
    node _io_aluctr_T_44 = eq(io.func7, UInt<1>("h0")) @[ContrGen.scala 80:74]
    node _io_aluctr_T_45 = and(_io_aluctr_T_43, _io_aluctr_T_44) @[ContrGen.scala 80:62]
    node _io_aluctr_T_46 = eq(io.opcode, UInt<6>("h33")) @[ContrGen.scala 81:20]
    node _io_aluctr_T_47 = eq(io.func3, UInt<2>("h3")) @[ContrGen.scala 81:49]
    node _io_aluctr_T_48 = and(_io_aluctr_T_46, _io_aluctr_T_47) @[ContrGen.scala 81:37]
    node _io_aluctr_T_49 = eq(io.func7, UInt<1>("h0")) @[ContrGen.scala 81:74]
    node _io_aluctr_T_50 = and(_io_aluctr_T_48, _io_aluctr_T_49) @[ContrGen.scala 81:62]
    node _io_aluctr_T_51 = eq(io.opcode, UInt<6>("h33")) @[ContrGen.scala 82:20]
    node _io_aluctr_T_52 = eq(io.func3, UInt<3>("h4")) @[ContrGen.scala 82:49]
    node _io_aluctr_T_53 = and(_io_aluctr_T_51, _io_aluctr_T_52) @[ContrGen.scala 82:37]
    node _io_aluctr_T_54 = eq(io.func7, UInt<1>("h0")) @[ContrGen.scala 82:74]
    node _io_aluctr_T_55 = and(_io_aluctr_T_53, _io_aluctr_T_54) @[ContrGen.scala 82:62]
    node _io_aluctr_T_56 = eq(io.opcode, UInt<6>("h33")) @[ContrGen.scala 83:20]
    node _io_aluctr_T_57 = eq(io.func3, UInt<3>("h5")) @[ContrGen.scala 83:49]
    node _io_aluctr_T_58 = and(_io_aluctr_T_56, _io_aluctr_T_57) @[ContrGen.scala 83:37]
    node _io_aluctr_T_59 = eq(io.func7, UInt<1>("h0")) @[ContrGen.scala 83:74]
    node _io_aluctr_T_60 = and(_io_aluctr_T_58, _io_aluctr_T_59) @[ContrGen.scala 83:62]
    node _io_aluctr_T_61 = eq(io.opcode, UInt<6>("h33")) @[ContrGen.scala 84:20]
    node _io_aluctr_T_62 = eq(io.func3, UInt<3>("h5")) @[ContrGen.scala 84:49]
    node _io_aluctr_T_63 = and(_io_aluctr_T_61, _io_aluctr_T_62) @[ContrGen.scala 84:37]
    node _io_aluctr_T_64 = eq(io.func7, UInt<6>("h20")) @[ContrGen.scala 84:74]
    node _io_aluctr_T_65 = and(_io_aluctr_T_63, _io_aluctr_T_64) @[ContrGen.scala 84:62]
    node _io_aluctr_T_66 = eq(io.opcode, UInt<6>("h33")) @[ContrGen.scala 85:20]
    node _io_aluctr_T_67 = eq(io.func3, UInt<3>("h6")) @[ContrGen.scala 85:49]
    node _io_aluctr_T_68 = and(_io_aluctr_T_66, _io_aluctr_T_67) @[ContrGen.scala 85:37]
    node _io_aluctr_T_69 = eq(io.func7, UInt<1>("h0")) @[ContrGen.scala 85:74]
    node _io_aluctr_T_70 = and(_io_aluctr_T_68, _io_aluctr_T_69) @[ContrGen.scala 85:62]
    node _io_aluctr_T_71 = eq(io.opcode, UInt<6>("h33")) @[ContrGen.scala 86:20]
    node _io_aluctr_T_72 = eq(io.func3, UInt<3>("h7")) @[ContrGen.scala 86:49]
    node _io_aluctr_T_73 = and(_io_aluctr_T_71, _io_aluctr_T_72) @[ContrGen.scala 86:37]
    node _io_aluctr_T_74 = eq(io.func7, UInt<1>("h0")) @[ContrGen.scala 86:74]
    node _io_aluctr_T_75 = and(_io_aluctr_T_73, _io_aluctr_T_74) @[ContrGen.scala 86:62]
    node _io_aluctr_T_76 = eq(io.opcode, UInt<7>("h63")) @[ContrGen.scala 88:20]
    node _io_aluctr_T_77 = eq(io.func3, UInt<1>("h0")) @[ContrGen.scala 88:49]
    node _io_aluctr_T_78 = and(_io_aluctr_T_76, _io_aluctr_T_77) @[ContrGen.scala 88:37]
    node _io_aluctr_T_79 = eq(io.opcode, UInt<7>("h63")) @[ContrGen.scala 89:20]
    node _io_aluctr_T_80 = eq(io.func3, UInt<1>("h1")) @[ContrGen.scala 89:49]
    node _io_aluctr_T_81 = and(_io_aluctr_T_79, _io_aluctr_T_80) @[ContrGen.scala 89:37]
    node _io_aluctr_T_82 = eq(io.opcode, UInt<7>("h63")) @[ContrGen.scala 90:20]
    node _io_aluctr_T_83 = eq(io.func3, UInt<3>("h4")) @[ContrGen.scala 90:49]
    node _io_aluctr_T_84 = and(_io_aluctr_T_82, _io_aluctr_T_83) @[ContrGen.scala 90:37]
    node _io_aluctr_T_85 = eq(io.opcode, UInt<7>("h63")) @[ContrGen.scala 91:20]
    node _io_aluctr_T_86 = eq(io.func3, UInt<3>("h5")) @[ContrGen.scala 91:49]
    node _io_aluctr_T_87 = and(_io_aluctr_T_85, _io_aluctr_T_86) @[ContrGen.scala 91:37]
    node _io_aluctr_T_88 = eq(io.opcode, UInt<7>("h63")) @[ContrGen.scala 92:20]
    node _io_aluctr_T_89 = eq(io.func3, UInt<3>("h6")) @[ContrGen.scala 92:49]
    node _io_aluctr_T_90 = and(_io_aluctr_T_88, _io_aluctr_T_89) @[ContrGen.scala 92:37]
    node _io_aluctr_T_91 = eq(io.opcode, UInt<7>("h63")) @[ContrGen.scala 93:20]
    node _io_aluctr_T_92 = eq(io.func3, UInt<3>("h7")) @[ContrGen.scala 93:49]
    node _io_aluctr_T_93 = and(_io_aluctr_T_91, _io_aluctr_T_92) @[ContrGen.scala 93:37]
    node _io_aluctr_T_94 = mux(_io_aluctr_T_93, UInt<4>("ha"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _io_aluctr_T_95 = mux(_io_aluctr_T_90, UInt<4>("ha"), _io_aluctr_T_94) @[Mux.scala 101:16]
    node _io_aluctr_T_96 = mux(_io_aluctr_T_87, UInt<2>("h2"), _io_aluctr_T_95) @[Mux.scala 101:16]
    node _io_aluctr_T_97 = mux(_io_aluctr_T_84, UInt<2>("h2"), _io_aluctr_T_96) @[Mux.scala 101:16]
    node _io_aluctr_T_98 = mux(_io_aluctr_T_81, UInt<2>("h2"), _io_aluctr_T_97) @[Mux.scala 101:16]
    node _io_aluctr_T_99 = mux(_io_aluctr_T_78, UInt<2>("h2"), _io_aluctr_T_98) @[Mux.scala 101:16]
    node _io_aluctr_T_100 = mux(_io_aluctr_T_75, UInt<3>("h7"), _io_aluctr_T_99) @[Mux.scala 101:16]
    node _io_aluctr_T_101 = mux(_io_aluctr_T_70, UInt<3>("h6"), _io_aluctr_T_100) @[Mux.scala 101:16]
    node _io_aluctr_T_102 = mux(_io_aluctr_T_65, UInt<4>("hd"), _io_aluctr_T_101) @[Mux.scala 101:16]
    node _io_aluctr_T_103 = mux(_io_aluctr_T_60, UInt<3>("h5"), _io_aluctr_T_102) @[Mux.scala 101:16]
    node _io_aluctr_T_104 = mux(_io_aluctr_T_55, UInt<3>("h4"), _io_aluctr_T_103) @[Mux.scala 101:16]
    node _io_aluctr_T_105 = mux(_io_aluctr_T_50, UInt<4>("ha"), _io_aluctr_T_104) @[Mux.scala 101:16]
    node _io_aluctr_T_106 = mux(_io_aluctr_T_45, UInt<2>("h2"), _io_aluctr_T_105) @[Mux.scala 101:16]
    node _io_aluctr_T_107 = mux(_io_aluctr_T_40, UInt<1>("h1"), _io_aluctr_T_106) @[Mux.scala 101:16]
    node _io_aluctr_T_108 = mux(_io_aluctr_T_35, UInt<4>("h8"), _io_aluctr_T_107) @[Mux.scala 101:16]
    node _io_aluctr_T_109 = mux(_io_aluctr_T_30, UInt<4>("hd"), _io_aluctr_T_108) @[Mux.scala 101:16]
    node _io_aluctr_T_110 = mux(_io_aluctr_T_25, UInt<3>("h5"), _io_aluctr_T_109) @[Mux.scala 101:16]
    node _io_aluctr_T_111 = mux(_io_aluctr_T_20, UInt<1>("h1"), _io_aluctr_T_110) @[Mux.scala 101:16]
    node _io_aluctr_T_112 = mux(_io_aluctr_T_15, UInt<3>("h7"), _io_aluctr_T_111) @[Mux.scala 101:16]
    node _io_aluctr_T_113 = mux(_io_aluctr_T_12, UInt<3>("h6"), _io_aluctr_T_112) @[Mux.scala 101:16]
    node _io_aluctr_T_114 = mux(_io_aluctr_T_9, UInt<3>("h4"), _io_aluctr_T_113) @[Mux.scala 101:16]
    node _io_aluctr_T_115 = mux(_io_aluctr_T_6, UInt<4>("ha"), _io_aluctr_T_114) @[Mux.scala 101:16]
    node _io_aluctr_T_116 = mux(_io_aluctr_T_3, UInt<2>("h2"), _io_aluctr_T_115) @[Mux.scala 101:16]
    node _io_aluctr_T_117 = mux(_io_aluctr_T, UInt<2>("h3"), _io_aluctr_T_116) @[Mux.scala 101:16]
    io.aluctr <= _io_aluctr_T_117 @[ContrGen.scala 66:15]
    node _io_branch_T = eq(io.opcode, UInt<7>("h6f")) @[ContrGen.scala 98:20]
    node _io_branch_T_1 = eq(io.opcode, UInt<7>("h67")) @[ContrGen.scala 99:20]
    node _io_branch_T_2 = eq(io.opcode, UInt<7>("h63")) @[ContrGen.scala 101:20]
    node _io_branch_T_3 = eq(io.func3, UInt<1>("h0")) @[ContrGen.scala 101:49]
    node _io_branch_T_4 = and(_io_branch_T_2, _io_branch_T_3) @[ContrGen.scala 101:37]
    node _io_branch_T_5 = eq(io.opcode, UInt<7>("h63")) @[ContrGen.scala 102:20]
    node _io_branch_T_6 = eq(io.func3, UInt<1>("h1")) @[ContrGen.scala 102:49]
    node _io_branch_T_7 = and(_io_branch_T_5, _io_branch_T_6) @[ContrGen.scala 102:37]
    node _io_branch_T_8 = eq(io.opcode, UInt<7>("h63")) @[ContrGen.scala 103:20]
    node _io_branch_T_9 = eq(io.func3, UInt<3>("h4")) @[ContrGen.scala 103:49]
    node _io_branch_T_10 = and(_io_branch_T_8, _io_branch_T_9) @[ContrGen.scala 103:37]
    node _io_branch_T_11 = eq(io.opcode, UInt<7>("h63")) @[ContrGen.scala 104:20]
    node _io_branch_T_12 = eq(io.func3, UInt<3>("h5")) @[ContrGen.scala 104:49]
    node _io_branch_T_13 = and(_io_branch_T_11, _io_branch_T_12) @[ContrGen.scala 104:37]
    node _io_branch_T_14 = eq(io.opcode, UInt<7>("h63")) @[ContrGen.scala 105:20]
    node _io_branch_T_15 = eq(io.func3, UInt<3>("h6")) @[ContrGen.scala 105:49]
    node _io_branch_T_16 = and(_io_branch_T_14, _io_branch_T_15) @[ContrGen.scala 105:37]
    node _io_branch_T_17 = eq(io.opcode, UInt<7>("h63")) @[ContrGen.scala 106:20]
    node _io_branch_T_18 = eq(io.func3, UInt<3>("h7")) @[ContrGen.scala 106:49]
    node _io_branch_T_19 = and(_io_branch_T_17, _io_branch_T_18) @[ContrGen.scala 106:37]
    node _io_branch_T_20 = mux(_io_branch_T_19, UInt<3>("h7"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _io_branch_T_21 = mux(_io_branch_T_16, UInt<3>("h6"), _io_branch_T_20) @[Mux.scala 101:16]
    node _io_branch_T_22 = mux(_io_branch_T_13, UInt<3>("h7"), _io_branch_T_21) @[Mux.scala 101:16]
    node _io_branch_T_23 = mux(_io_branch_T_10, UInt<3>("h6"), _io_branch_T_22) @[Mux.scala 101:16]
    node _io_branch_T_24 = mux(_io_branch_T_7, UInt<3>("h5"), _io_branch_T_23) @[Mux.scala 101:16]
    node _io_branch_T_25 = mux(_io_branch_T_4, UInt<3>("h4"), _io_branch_T_24) @[Mux.scala 101:16]
    node _io_branch_T_26 = mux(_io_branch_T_1, UInt<2>("h2"), _io_branch_T_25) @[Mux.scala 101:16]
    node _io_branch_T_27 = mux(_io_branch_T, UInt<1>("h1"), _io_branch_T_26) @[Mux.scala 101:16]
    io.branch <= _io_branch_T_27 @[ContrGen.scala 97:15]
    node _io_memreg_T = eq(UInt<2>("h3"), io.opcode) @[Mux.scala 81:61]
    node _io_memreg_T_1 = mux(_io_memreg_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    io.memreg <= _io_memreg_T_1 @[ContrGen.scala 110:15]
    node _io_memwr_T = eq(UInt<6>("h23"), io.opcode) @[Mux.scala 81:61]
    node _io_memwr_T_1 = mux(_io_memwr_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    io.memwr <= _io_memwr_T_1 @[ContrGen.scala 115:14]
    node _io_memop_T = eq(io.opcode, UInt<6>("h23")) @[ContrGen.scala 121:20]
    node _io_memop_T_1 = eq(io.func3, UInt<1>("h1")) @[ContrGen.scala 121:49]
    node _io_memop_T_2 = and(_io_memop_T, _io_memop_T_1) @[ContrGen.scala 121:37]
    node _io_memop_T_3 = eq(io.opcode, UInt<6>("h23")) @[ContrGen.scala 122:20]
    node _io_memop_T_4 = eq(io.func3, UInt<2>("h2")) @[ContrGen.scala 122:49]
    node _io_memop_T_5 = and(_io_memop_T_3, _io_memop_T_4) @[ContrGen.scala 122:37]
    node _io_memop_T_6 = mux(_io_memop_T_5, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _io_memop_T_7 = mux(_io_memop_T_2, UInt<1>("h1"), _io_memop_T_6) @[Mux.scala 101:16]
    io.memop <= _io_memop_T_7 @[ContrGen.scala 120:14]
    node _io_rdmemop_T = eq(io.opcode, UInt<2>("h3")) @[ContrGen.scala 126:20]
    node _io_rdmemop_T_1 = eq(io.func3, UInt<1>("h1")) @[ContrGen.scala 126:49]
    node _io_rdmemop_T_2 = and(_io_rdmemop_T, _io_rdmemop_T_1) @[ContrGen.scala 126:37]
    node _io_rdmemop_T_3 = eq(io.opcode, UInt<2>("h3")) @[ContrGen.scala 127:20]
    node _io_rdmemop_T_4 = eq(io.func3, UInt<2>("h2")) @[ContrGen.scala 127:49]
    node _io_rdmemop_T_5 = and(_io_rdmemop_T_3, _io_rdmemop_T_4) @[ContrGen.scala 127:37]
    node _io_rdmemop_T_6 = eq(io.opcode, UInt<2>("h3")) @[ContrGen.scala 128:20]
    node _io_rdmemop_T_7 = eq(io.func3, UInt<3>("h4")) @[ContrGen.scala 128:49]
    node _io_rdmemop_T_8 = and(_io_rdmemop_T_6, _io_rdmemop_T_7) @[ContrGen.scala 128:37]
    node _io_rdmemop_T_9 = eq(io.opcode, UInt<2>("h3")) @[ContrGen.scala 129:20]
    node _io_rdmemop_T_10 = eq(io.func3, UInt<3>("h5")) @[ContrGen.scala 129:49]
    node _io_rdmemop_T_11 = and(_io_rdmemop_T_9, _io_rdmemop_T_10) @[ContrGen.scala 129:37]
    node _io_rdmemop_T_12 = mux(_io_rdmemop_T_11, UInt<3>("h5"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _io_rdmemop_T_13 = mux(_io_rdmemop_T_8, UInt<3>("h4"), _io_rdmemop_T_12) @[Mux.scala 101:16]
    node _io_rdmemop_T_14 = mux(_io_rdmemop_T_5, UInt<2>("h2"), _io_rdmemop_T_13) @[Mux.scala 101:16]
    node _io_rdmemop_T_15 = mux(_io_rdmemop_T_2, UInt<1>("h1"), _io_rdmemop_T_14) @[Mux.scala 101:16]
    io.rdmemop <= _io_rdmemop_T_15 @[ContrGen.scala 125:16]

  module Mypc :
    input clock : Clock
    input reset : Reset
    output io : { flip nextpc : UInt<32>, flip wrclk : Clock, pc : UInt<32>}

    reg pcReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h80000000")) @[Mypc.scala 11:24]
    pcReg <= io.nextpc @[Mypc.scala 13:19]
    io.pc <= pcReg @[Mypc.scala 15:11]

  module Mynextpc :
    input clock : Clock
    input reset : Reset
    output io : { flip imm : SInt<32>, flip rs1 : UInt<32>, flip pc : UInt<32>, flip pcasrc : UInt<1>, flip pcbsrc : UInt<1>, nextpc : UInt<32>}

    node _pca_T = eq(io.pcasrc, UInt<1>("h1")) @[Mynextpc.scala 14:29]
    node _pca_T_1 = asUInt(io.imm) @[Mynextpc.scala 14:48]
    node pca = mux(_pca_T, _pca_T_1, UInt<3>("h4")) @[Mynextpc.scala 14:18]
    node _pcb_T = eq(io.pcbsrc, UInt<1>("h1")) @[Mynextpc.scala 15:29]
    node pcb = mux(_pcb_T, io.rs1, io.pc) @[Mynextpc.scala 15:18]
    node _io_nextpc_T = add(pca, pcb) @[Mynextpc.scala 16:22]
    node _io_nextpc_T_1 = tail(_io_nextpc_T, 1) @[Mynextpc.scala 16:22]
    io.nextpc <= _io_nextpc_T_1 @[Mynextpc.scala 16:15]

  module BranchCond :
    input clock : Clock
    input reset : Reset
    output io : { flip less : UInt<1>, flip zero : UInt<1>, flip branch : UInt<3>, pcasrc : UInt<1>, pcbsrc : UInt<1>}

    node _io_pcasrc_T = eq(io.branch, UInt<1>("h0")) @[BranchCond.scala 14:20]
    node _io_pcasrc_T_1 = eq(io.branch, UInt<3>("h4")) @[BranchCond.scala 15:20]
    node _io_pcasrc_T_2 = eq(io.zero, UInt<1>("h0")) @[BranchCond.scala 15:44]
    node _io_pcasrc_T_3 = and(_io_pcasrc_T_1, _io_pcasrc_T_2) @[BranchCond.scala 15:33]
    node _io_pcasrc_T_4 = eq(io.branch, UInt<3>("h5")) @[BranchCond.scala 16:20]
    node _io_pcasrc_T_5 = eq(io.zero, UInt<1>("h1")) @[BranchCond.scala 16:44]
    node _io_pcasrc_T_6 = and(_io_pcasrc_T_4, _io_pcasrc_T_5) @[BranchCond.scala 16:33]
    node _io_pcasrc_T_7 = eq(io.branch, UInt<3>("h6")) @[BranchCond.scala 17:20]
    node _io_pcasrc_T_8 = eq(io.less, UInt<1>("h0")) @[BranchCond.scala 17:44]
    node _io_pcasrc_T_9 = and(_io_pcasrc_T_7, _io_pcasrc_T_8) @[BranchCond.scala 17:33]
    node _io_pcasrc_T_10 = eq(io.branch, UInt<3>("h7")) @[BranchCond.scala 18:20]
    node _io_pcasrc_T_11 = eq(io.less, UInt<1>("h1")) @[BranchCond.scala 18:44]
    node _io_pcasrc_T_12 = and(_io_pcasrc_T_10, _io_pcasrc_T_11) @[BranchCond.scala 18:33]
    node _io_pcasrc_T_13 = mux(_io_pcasrc_T_12, UInt<1>("h0"), UInt<1>("h1")) @[Mux.scala 101:16]
    node _io_pcasrc_T_14 = mux(_io_pcasrc_T_9, UInt<1>("h0"), _io_pcasrc_T_13) @[Mux.scala 101:16]
    node _io_pcasrc_T_15 = mux(_io_pcasrc_T_6, UInt<1>("h0"), _io_pcasrc_T_14) @[Mux.scala 101:16]
    node _io_pcasrc_T_16 = mux(_io_pcasrc_T_3, UInt<1>("h0"), _io_pcasrc_T_15) @[Mux.scala 101:16]
    node _io_pcasrc_T_17 = mux(_io_pcasrc_T, UInt<1>("h0"), _io_pcasrc_T_16) @[Mux.scala 101:16]
    io.pcasrc <= _io_pcasrc_T_17 @[BranchCond.scala 13:15]
    node _io_pcbsrc_T = eq(io.branch, UInt<2>("h2")) @[BranchCond.scala 22:20]
    node _io_pcbsrc_T_1 = mux(_io_pcbsrc_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 101:16]
    io.pcbsrc <= _io_pcbsrc_T_1 @[BranchCond.scala 21:15]

  extmodule DataMem :
    input valid : UInt<1>
    input wen : UInt<1>
    input raddr : UInt<32>
    input waddr : UInt<32>
    input wdata : UInt<32>
    input wmask : UInt<3>
    output rdata : UInt<32>
    defname = DataMem

  extmodule InstFetch :
    input clk : Clock
    input pc : UInt<32>
    output inst : UInt<32>
    input rst : UInt<1>
    defname = InstFetch

  extmodule EbreakDetector :
    input inst : UInt<32>
    input pc : UInt<32>
    output exit : UInt<1>
    defname = EbreakDetector

  extmodule GetRegs :
    input regs : UInt<32>[16]
    defname = GetRegs

  module Npc :
    input clock : Clock
    input reset : UInt<1>
    output io : { pc : UInt<32>, inst : UInt<32>, exit : UInt<1>, regs : UInt<32>[16], nextPC : UInt<32>}

    inst immgen of ImmGen @[Npc.scala 69:30]
    immgen.clock <= clock
    immgen.reset <= reset
    inst regfile of RegFile @[Npc.scala 70:30]
    regfile.clock <= clock
    regfile.reset <= reset
    inst alu of ALU @[Npc.scala 71:30]
    alu.clock <= clock
    alu.reset <= reset
    inst contrgen of ContrGen @[Npc.scala 72:30]
    contrgen.clock <= clock
    contrgen.reset <= reset
    inst mypc of Mypc @[Npc.scala 73:30]
    mypc.clock <= clock
    mypc.reset <= reset
    inst mynextpc of Mynextpc @[Npc.scala 74:30]
    mynextpc.clock <= clock
    mynextpc.reset <= reset
    inst branchcond of BranchCond @[Npc.scala 75:30]
    branchcond.clock <= clock
    branchcond.reset <= reset
    inst datamem of DataMem @[Npc.scala 76:30]
    datamem.rdata is invalid
    datamem.wmask is invalid
    datamem.wdata is invalid
    datamem.waddr is invalid
    datamem.raddr is invalid
    datamem.wen is invalid
    datamem.valid is invalid
    inst instfetch of InstFetch @[Npc.scala 77:30]
    instfetch.rst is invalid
    instfetch.inst is invalid
    instfetch.pc is invalid
    instfetch.clk is invalid
    inst ebreakdetector of EbreakDetector @[Npc.scala 78:30]
    ebreakdetector.exit is invalid
    ebreakdetector.pc is invalid
    ebreakdetector.inst is invalid
    inst getregs of GetRegs @[Npc.scala 79:30]
    getregs.regs is invalid
    instfetch.rst <= reset @[Npc.scala 85:20]
    instfetch.clk <= clock @[Npc.scala 86:20]
    instfetch.pc <= mynextpc.io.nextpc @[Npc.scala 87:20]
    node _contrgen_io_opcode_T = bits(instfetch.inst, 6, 0) @[Npc.scala 90:32]
    contrgen.io.opcode <= _contrgen_io_opcode_T @[Npc.scala 90:22]
    node _contrgen_io_func3_T = bits(instfetch.inst, 14, 12) @[Npc.scala 91:31]
    contrgen.io.func3 <= _contrgen_io_func3_T @[Npc.scala 91:21]
    node _contrgen_io_func7_T = bits(instfetch.inst, 31, 25) @[Npc.scala 92:31]
    contrgen.io.func7 <= _contrgen_io_func7_T @[Npc.scala 92:21]
    alu.io.aluctr <= contrgen.io.aluctr @[Npc.scala 93:22]
    regfile.io.regwr <= contrgen.io.regwr @[Npc.scala 94:22]
    immgen.io.immop <= contrgen.io.immop @[Npc.scala 95:22]
    alu.io.alua <= contrgen.io.alua @[Npc.scala 96:22]
    alu.io.alub <= contrgen.io.alub @[Npc.scala 97:22]
    datamem.wmask <= contrgen.io.memop @[Npc.scala 98:22]
    datamem.wen <= contrgen.io.memwr @[Npc.scala 99:22]
    branchcond.io.branch <= contrgen.io.branch @[Npc.scala 100:24]
    immgen.io.instin <= instfetch.inst @[Npc.scala 105:20]
    node _rdata_T = bits(datamem.rdata, 7, 7) @[Npc.scala 111:46]
    node _rdata_T_1 = bits(_rdata_T, 0, 0) @[Bitwise.scala 74:15]
    node _rdata_T_2 = mux(_rdata_T_1, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 74:12]
    node _rdata_T_3 = bits(datamem.rdata, 7, 0) @[Npc.scala 111:68]
    node _rdata_T_4 = cat(_rdata_T_2, _rdata_T_3) @[Cat.scala 31:58]
    node _rdata_T_5 = bits(datamem.rdata, 15, 15) @[Npc.scala 113:46]
    node _rdata_T_6 = bits(_rdata_T_5, 0, 0) @[Bitwise.scala 74:15]
    node _rdata_T_7 = mux(_rdata_T_6, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 74:12]
    node _rdata_T_8 = bits(datamem.rdata, 15, 0) @[Npc.scala 113:69]
    node _rdata_T_9 = cat(_rdata_T_7, _rdata_T_8) @[Cat.scala 31:58]
    node _rdata_T_10 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 74:12]
    node _rdata_T_11 = bits(datamem.rdata, 7, 0) @[Npc.scala 115:52]
    node _rdata_T_12 = cat(_rdata_T_10, _rdata_T_11) @[Cat.scala 31:58]
    node _rdata_T_13 = mux(UInt<1>("h0"), UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 74:12]
    node _rdata_T_14 = bits(datamem.rdata, 15, 0) @[Npc.scala 117:52]
    node _rdata_T_15 = cat(_rdata_T_13, _rdata_T_14) @[Cat.scala 31:58]
    node _rdata_T_16 = eq(UInt<1>("h0"), contrgen.io.rdmemop) @[Mux.scala 81:61]
    node _rdata_T_17 = mux(_rdata_T_16, _rdata_T_4, datamem.rdata) @[Mux.scala 81:58]
    node _rdata_T_18 = eq(UInt<1>("h1"), contrgen.io.rdmemop) @[Mux.scala 81:61]
    node _rdata_T_19 = mux(_rdata_T_18, _rdata_T_9, _rdata_T_17) @[Mux.scala 81:58]
    node _rdata_T_20 = eq(UInt<3>("h4"), contrgen.io.rdmemop) @[Mux.scala 81:61]
    node _rdata_T_21 = mux(_rdata_T_20, _rdata_T_12, _rdata_T_19) @[Mux.scala 81:58]
    node _rdata_T_22 = eq(UInt<3>("h5"), contrgen.io.rdmemop) @[Mux.scala 81:61]
    node rdata = mux(_rdata_T_22, _rdata_T_15, _rdata_T_21) @[Mux.scala 81:58]
    node _regfile_io_ra_T = bits(instfetch.inst, 19, 15) @[Npc.scala 121:27]
    node _regfile_io_ra_T_1 = bits(_regfile_io_ra_T, 3, 0) @[Npc.scala 121:34]
    regfile.io.ra <= _regfile_io_ra_T_1 @[Npc.scala 121:17]
    node _regfile_io_rb_T = bits(instfetch.inst, 24, 20) @[Npc.scala 122:27]
    node _regfile_io_rb_T_1 = bits(_regfile_io_rb_T, 3, 0) @[Npc.scala 122:34]
    regfile.io.rb <= _regfile_io_rb_T_1 @[Npc.scala 122:17]
    node _regfile_io_rw_T = bits(instfetch.inst, 11, 7) @[Npc.scala 123:27]
    node _regfile_io_rw_T_1 = bits(_regfile_io_rw_T, 3, 0) @[Npc.scala 123:33]
    regfile.io.rw <= _regfile_io_rw_T_1 @[Npc.scala 123:17]
    node _regfile_io_busw_T = eq(contrgen.io.memreg, UInt<1>("h0")) @[Npc.scala 124:45]
    node _regfile_io_busw_T_1 = mux(_regfile_io_busw_T, alu.io.result, rdata) @[Npc.scala 124:25]
    regfile.io.busw <= _regfile_io_busw_T_1 @[Npc.scala 124:19]
    alu.io.rs1 <= regfile.io.busa @[Npc.scala 128:14]
    alu.io.pc <= mypc.io.pc @[Npc.scala 129:14]
    alu.io.rs2 <= regfile.io.busb @[Npc.scala 130:14]
    alu.io.imm <= immgen.io.immout @[Npc.scala 131:14]
    mynextpc.io.imm <= immgen.io.immout @[Npc.scala 134:19]
    mynextpc.io.rs1 <= regfile.io.busa @[Npc.scala 135:19]
    mynextpc.io.pc <= mypc.io.pc @[Npc.scala 136:19]
    mynextpc.io.pcasrc <= branchcond.io.pcasrc @[Npc.scala 137:22]
    mynextpc.io.pcbsrc <= branchcond.io.pcbsrc @[Npc.scala 138:22]
    mypc.io.nextpc <= mynextpc.io.nextpc @[Npc.scala 141:19]
    mypc.io.wrclk <= clock @[Npc.scala 142:21]
    branchcond.io.less <= alu.io.less @[Npc.scala 145:22]
    branchcond.io.zero <= alu.io.zero @[Npc.scala 146:22]
    datamem.raddr <= alu.io.result @[Npc.scala 150:20]
    datamem.waddr <= alu.io.result @[Npc.scala 151:20]
    datamem.wdata <= regfile.io.busb @[Npc.scala 152:20]
    node _datamem_io_valid_T = bits(contrgen.io.memwr, 0, 0) @[Npc.scala 153:41]
    node _datamem_io_valid_T_1 = eq(contrgen.io.memreg, UInt<1>("h1")) @[Npc.scala 153:71]
    node _datamem_io_valid_T_2 = or(_datamem_io_valid_T, _datamem_io_valid_T_1) @[Npc.scala 153:48]
    datamem.valid <= _datamem_io_valid_T_2 @[Npc.scala 153:20]
    getregs.regs[0] <= regfile.io.regsout[0] @[Npc.scala 157:19]
    getregs.regs[1] <= regfile.io.regsout[1] @[Npc.scala 157:19]
    getregs.regs[2] <= regfile.io.regsout[2] @[Npc.scala 157:19]
    getregs.regs[3] <= regfile.io.regsout[3] @[Npc.scala 157:19]
    getregs.regs[4] <= regfile.io.regsout[4] @[Npc.scala 157:19]
    getregs.regs[5] <= regfile.io.regsout[5] @[Npc.scala 157:19]
    getregs.regs[6] <= regfile.io.regsout[6] @[Npc.scala 157:19]
    getregs.regs[7] <= regfile.io.regsout[7] @[Npc.scala 157:19]
    getregs.regs[8] <= regfile.io.regsout[8] @[Npc.scala 157:19]
    getregs.regs[9] <= regfile.io.regsout[9] @[Npc.scala 157:19]
    getregs.regs[10] <= regfile.io.regsout[10] @[Npc.scala 157:19]
    getregs.regs[11] <= regfile.io.regsout[11] @[Npc.scala 157:19]
    getregs.regs[12] <= regfile.io.regsout[12] @[Npc.scala 157:19]
    getregs.regs[13] <= regfile.io.regsout[13] @[Npc.scala 157:19]
    getregs.regs[14] <= regfile.io.regsout[14] @[Npc.scala 157:19]
    getregs.regs[15] <= regfile.io.regsout[15] @[Npc.scala 157:19]
    io.pc <= mypc.io.pc @[Npc.scala 161:9]
    io.nextPC <= mynextpc.io.nextpc @[Npc.scala 162:13]
    io.regs <= regfile.io.regsout @[Npc.scala 163:11]
    io.inst <= instfetch.inst @[Npc.scala 164:11]
    reg exitReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Npc.scala 167:24]
    ebreakdetector.inst <= instfetch.inst @[Npc.scala 168:26]
    ebreakdetector.pc <= mypc.io.pc @[Npc.scala 169:24]
    when ebreakdetector.exit : @[Npc.scala 171:32]
      exitReg <= UInt<1>("h1") @[Npc.scala 172:13]
    io.exit <= exitReg @[Npc.scala 175:11]

