circuit Alu :
  module Alu :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip op : UInt<3>, flip a : SInt<4>, flip b : SInt<4>, carry : UInt<1>, zero : UInt<1>, overflow : UInt<1>, result : SInt<4>}

    wire result : SInt<4> @[Alu.scala 16:20]
    wire carry : UInt<1> @[Alu.scala 17:19]
    wire overflow : UInt<1> @[Alu.scala 18:22]
    result <= asSInt(UInt<1>("h0")) @[Alu.scala 21:10]
    carry <= UInt<1>("h0") @[Alu.scala 22:9]
    overflow <= UInt<1>("h0") @[Alu.scala 23:12]
    node _T = eq(UInt<1>("h0"), io.op) @[Alu.scala 35:17]
    when _T : @[Alu.scala 35:17]
      node sum = add(io.a, io.b) @[Alu.scala 37:22]
      node _result_T = bits(sum, 3, 0) @[Alu.scala 38:20]
      node _result_T_1 = asSInt(_result_T) @[Alu.scala 38:27]
      result <= _result_T_1 @[Alu.scala 38:14]
      node _carry_T = bits(sum, 4, 4) @[Alu.scala 39:19]
      carry <= _carry_T @[Alu.scala 39:13]
      node _overflow_T = bits(io.a, 3, 3) @[Alu.scala 42:24]
      node _overflow_T_1 = bits(io.b, 3, 3) @[Alu.scala 42:36]
      node _overflow_T_2 = eq(_overflow_T, _overflow_T_1) @[Alu.scala 42:28]
      node _overflow_T_3 = bits(io.a, 3, 3) @[Alu.scala 42:49]
      node _overflow_T_4 = bits(result, 3, 3) @[Alu.scala 42:63]
      node _overflow_T_5 = neq(_overflow_T_3, _overflow_T_4) @[Alu.scala 42:53]
      node _overflow_T_6 = and(_overflow_T_2, _overflow_T_5) @[Alu.scala 42:41]
      overflow <= _overflow_T_6 @[Alu.scala 42:16]
    else :
      node _T_1 = eq(UInt<1>("h1"), io.op) @[Alu.scala 35:17]
      when _T_1 : @[Alu.scala 35:17]
        node diff = sub(io.a, io.b) @[Alu.scala 45:23]
        node _result_T_2 = bits(diff, 3, 0) @[Alu.scala 46:21]
        node _result_T_3 = asSInt(_result_T_2) @[Alu.scala 46:28]
        result <= _result_T_3 @[Alu.scala 46:14]
        node _carry_T_1 = bits(diff, 4, 4) @[Alu.scala 47:20]
        carry <= _carry_T_1 @[Alu.scala 47:13]
        node _overflow_T_7 = bits(io.a, 3, 3) @[Alu.scala 50:24]
        node _overflow_T_8 = bits(io.b, 3, 3) @[Alu.scala 50:36]
        node _overflow_T_9 = neq(_overflow_T_7, _overflow_T_8) @[Alu.scala 50:28]
        node _overflow_T_10 = bits(io.a, 3, 3) @[Alu.scala 50:49]
        node _overflow_T_11 = bits(result, 3, 3) @[Alu.scala 50:63]
        node _overflow_T_12 = neq(_overflow_T_10, _overflow_T_11) @[Alu.scala 50:53]
        node _overflow_T_13 = and(_overflow_T_9, _overflow_T_12) @[Alu.scala 50:41]
        overflow <= _overflow_T_13 @[Alu.scala 50:16]
      else :
        node _T_2 = eq(UInt<2>("h2"), io.op) @[Alu.scala 35:17]
        when _T_2 : @[Alu.scala 35:17]
          node _result_T_4 = not(io.a) @[Alu.scala 53:17]
          node _result_T_5 = asSInt(_result_T_4) @[Alu.scala 53:17]
          result <= _result_T_5 @[Alu.scala 53:14]
        else :
          node _T_3 = eq(UInt<2>("h3"), io.op) @[Alu.scala 35:17]
          when _T_3 : @[Alu.scala 35:17]
            node _result_T_6 = and(io.a, io.b) @[Alu.scala 56:22]
            node _result_T_7 = asSInt(_result_T_6) @[Alu.scala 56:22]
            result <= _result_T_7 @[Alu.scala 56:14]
          else :
            node _T_4 = eq(UInt<3>("h4"), io.op) @[Alu.scala 35:17]
            when _T_4 : @[Alu.scala 35:17]
              node _result_T_8 = or(io.a, io.b) @[Alu.scala 59:22]
              node _result_T_9 = asSInt(_result_T_8) @[Alu.scala 59:22]
              result <= _result_T_9 @[Alu.scala 59:14]
            else :
              node _T_5 = eq(UInt<3>("h5"), io.op) @[Alu.scala 35:17]
              when _T_5 : @[Alu.scala 35:17]
                node _result_T_10 = xor(io.a, io.b) @[Alu.scala 62:22]
                node _result_T_11 = asSInt(_result_T_10) @[Alu.scala 62:22]
                result <= _result_T_11 @[Alu.scala 62:14]
              else :
                node _T_6 = eq(UInt<3>("h6"), io.op) @[Alu.scala 35:17]
                when _T_6 : @[Alu.scala 35:17]
                  node _result_T_12 = lt(io.a, io.b) @[Alu.scala 65:26]
                  node _result_T_13 = mux(_result_T_12, asSInt(UInt<2>("h1")), asSInt(UInt<1>("h0"))) @[Alu.scala 65:20]
                  result <= _result_T_13 @[Alu.scala 65:14]
                else :
                  node _T_7 = eq(UInt<3>("h7"), io.op) @[Alu.scala 35:17]
                  when _T_7 : @[Alu.scala 35:17]
                    node _result_T_14 = eq(io.a, io.b) @[Alu.scala 68:26]
                    node _result_T_15 = mux(_result_T_14, asSInt(UInt<2>("h1")), asSInt(UInt<1>("h0"))) @[Alu.scala 68:20]
                    result <= _result_T_15 @[Alu.scala 68:14]
    io.result <= result @[Alu.scala 73:13]
    io.carry <= carry @[Alu.scala 74:12]
    node _io_zero_T = eq(result, asSInt(UInt<1>("h0"))) @[Alu.scala 75:22]
    io.zero <= _io_zero_T @[Alu.scala 75:11]
    io.overflow <= overflow @[Alu.scala 76:15]

