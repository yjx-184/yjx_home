circuit Alu :
  module Alu :
    input clock : Clock
    input reset : UInt<1>
    input io_op : UInt<3>
    input io_a : SInt<4>
    input io_b : SInt<4>
    output io_carry : UInt<1>
    output io_zero : UInt<1>
    output io_overflow : UInt<1>
    output io_result : SInt<4>

    node _T = eq(UInt<1>("h0"), io_op) @[Alu.scala 35:17]
    node sum = add(io_a, io_b) @[Alu.scala 37:22]
    node _result_T = bits(sum, 3, 0) @[Alu.scala 38:20]
    node _result_T_1 = asSInt(_result_T) @[Alu.scala 38:27]
    node _carry_T = bits(sum, 4, 4) @[Alu.scala 39:19]
    node _overflow_T = bits(io_a, 3, 3) @[Alu.scala 42:24]
    node _overflow_T_1 = bits(io_b, 3, 3) @[Alu.scala 42:36]
    node _overflow_T_2 = eq(_overflow_T, _overflow_T_1) @[Alu.scala 42:28]
    node _overflow_T_3 = bits(io_a, 3, 3) @[Alu.scala 42:49]
    node _T_1 = eq(UInt<1>("h1"), io_op) @[Alu.scala 35:17]
    node diff = sub(io_a, io_b) @[Alu.scala 45:23]
    node _result_T_2 = bits(diff, 3, 0) @[Alu.scala 46:21]
    node _result_T_3 = asSInt(_result_T_2) @[Alu.scala 46:28]
    node _T_2 = eq(UInt<2>("h2"), io_op) @[Alu.scala 35:17]
    node _result_T_4 = not(io_a) @[Alu.scala 53:17]
    node _result_T_5 = asSInt(_result_T_4) @[Alu.scala 53:17]
    node _T_3 = eq(UInt<2>("h3"), io_op) @[Alu.scala 35:17]
    node _result_T_6 = and(io_a, io_b) @[Alu.scala 56:22]
    node _result_T_7 = asSInt(_result_T_6) @[Alu.scala 56:22]
    node _T_4 = eq(UInt<3>("h4"), io_op) @[Alu.scala 35:17]
    node _result_T_8 = or(io_a, io_b) @[Alu.scala 59:22]
    node _result_T_9 = asSInt(_result_T_8) @[Alu.scala 59:22]
    node _T_5 = eq(UInt<3>("h5"), io_op) @[Alu.scala 35:17]
    node _result_T_10 = xor(io_a, io_b) @[Alu.scala 62:22]
    node _result_T_11 = asSInt(_result_T_10) @[Alu.scala 62:22]
    node _T_6 = eq(UInt<3>("h6"), io_op) @[Alu.scala 35:17]
    node _result_T_12 = lt(io_a, io_b) @[Alu.scala 65:26]
    node _result_T_13 = mux(_result_T_12, asSInt(UInt<2>("h1")), asSInt(UInt<1>("h0"))) @[Alu.scala 65:20]
    node _T_7 = eq(UInt<3>("h7"), io_op) @[Alu.scala 35:17]
    node _result_T_14 = eq(io_a, io_b) @[Alu.scala 68:26]
    node _result_T_15 = mux(_result_T_14, asSInt(UInt<2>("h1")), asSInt(UInt<1>("h0"))) @[Alu.scala 68:20]
    node _GEN_0 = mux(_T_7, _result_T_15, asSInt(UInt<1>("h0"))) @[Alu.scala 21:10 35:17 68:14]
    node _GEN_1 = mux(_T_6, _result_T_13, _GEN_0) @[Alu.scala 35:17 65:14]
    node _GEN_2 = mux(_T_5, _result_T_11, _GEN_1) @[Alu.scala 35:17 62:14]
    node _GEN_3 = mux(_T_4, _result_T_9, _GEN_2) @[Alu.scala 35:17 59:14]
    node _GEN_4 = mux(_T_3, _result_T_7, _GEN_3) @[Alu.scala 35:17 56:14]
    node _GEN_5 = mux(_T_2, _result_T_5, _GEN_4) @[Alu.scala 35:17 53:14]
    node _GEN_6 = mux(_T_1, _result_T_3, _GEN_5) @[Alu.scala 35:17 46:14]
    node _GEN_9 = mux(_T, _result_T_1, _GEN_6) @[Alu.scala 35:17 38:14]
    node result = _GEN_9 @[Alu.scala 16:20]
    node _overflow_T_4 = bits(result, 3, 3) @[Alu.scala 42:63]
    node _overflow_T_5 = neq(_overflow_T_3, _overflow_T_4) @[Alu.scala 42:53]
    node _overflow_T_6 = and(_overflow_T_2, _overflow_T_5) @[Alu.scala 42:41]
    node _carry_T_1 = bits(diff, 4, 4) @[Alu.scala 47:20]
    node _overflow_T_7 = bits(io_a, 3, 3) @[Alu.scala 50:24]
    node _overflow_T_8 = bits(io_b, 3, 3) @[Alu.scala 50:36]
    node _overflow_T_9 = neq(_overflow_T_7, _overflow_T_8) @[Alu.scala 50:28]
    node _overflow_T_10 = bits(io_a, 3, 3) @[Alu.scala 50:49]
    node _overflow_T_11 = bits(result, 3, 3) @[Alu.scala 50:63]
    node _overflow_T_12 = neq(_overflow_T_10, _overflow_T_11) @[Alu.scala 50:53]
    node _overflow_T_13 = and(_overflow_T_9, _overflow_T_12) @[Alu.scala 50:41]
    node _GEN_7 = mux(_T_1, _carry_T_1, UInt<1>("h0")) @[Alu.scala 35:17 47:13 22:9]
    node _GEN_8 = mux(_T_1, _overflow_T_13, UInt<1>("h0")) @[Alu.scala 23:12 35:17 50:16]
    node _GEN_10 = mux(_T, _carry_T, _GEN_7) @[Alu.scala 35:17 39:13]
    node _GEN_11 = mux(_T, _overflow_T_6, _GEN_8) @[Alu.scala 35:17 42:16]
    node _io_zero_T = eq(result, asSInt(UInt<1>("h0"))) @[Alu.scala 75:22]
    node carry = _GEN_10 @[Alu.scala 17:19]
    node overflow = _GEN_11 @[Alu.scala 18:22]
    io_carry <= carry @[Alu.scala 74:12]
    io_zero <= _io_zero_T @[Alu.scala 75:11]
    io_overflow <= overflow @[Alu.scala 76:15]
    io_result <= result @[Alu.scala 73:13]
